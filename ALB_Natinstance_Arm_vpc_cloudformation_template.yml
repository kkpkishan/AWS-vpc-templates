Description:
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an Internet Gateway, with a default
  route on the public subnets. It deploys  NAT Gateways,
  and default routes for them in the private subnets. kkpkishan@gmail.com

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.11.0/24
  NatSubnetCIDR:
    Description: Please enter the IP range (CIDR notation) for the NAT Gateway subnet in the  Availability Zone
    Type: String
    Default: 10.192.31.0/24
  
  ALBSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.192.41.0/24

  ALBSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.192.51.0/24
  
  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24
  KeyName:
    Description: 'Optional key pair of the ec2-user to establish a SSH connection to the SSH NAT instances host/instance.'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: ''
  InstanceType:
    Description: 'Instance type of the NAT instances host/instance.'
    Type: String
    Default: 't4g.micro'

Mappings:
  RegionMap:
    'ap-south-1':
      AMI: 'ami-059eeca93797c4ead'
    'ap-south-2':
      AMI: 'ami-07ece179f52d0064a'
    'eu-west-3':
      AMI: 'ami-03e50fb5a049bde60'
    'eu-west-2':
      AMI: 'ami-06a67bec0c76e2b85'
    'eu-north-1':
      AMI: 'ami-0c7d85817f79a920f'
    'eu-west-1':
      AMI: 'ami-0ca08121e327f2c89'
    'ap-northeast-2':
      AMI: 'ami-084e11638aa396788'
    'me-south-1':
      AMI: 'ami-099948c9b936d71a2'
    'ap-northeast-1':
      AMI: 'ami-0f703365abcb3716b'
    'ca-central-1':
      AMI: 'ami-0d407711fdb54e050'
    'ap-southeast-1':
      AMI: 'ami-09e2f1c3f9fd86c9f'
    'ap-southeast-2':
      AMI: 'ami-0e1d75d0da531c45d'
    'eu-central-1':
      AMI: 'ami-001e06d9dd526cca4'
    'us-east-1':
      AMI: 'ami-0b4c67d70a6907b93'
    'us-east-2':
      AMI: 'ami-0acd4c5222e0d00d2'
    'us-west-1':
      AMI: 'ami-04caf1fb1a5bae0c2'
    'us-west-2':
      AMI: 'ami-0b4e422089afb4751'
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)
  
  NatSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref NatSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} NAT Subnet (AZ1)

  ALBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref ALBSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ALB Subnet (AZ1)

  ALBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref ALBSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ALB Subnet (AZ2)

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)


  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PublicRoutes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  ALBRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-ALBRoutes

  DefaultALBRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref ALBRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  ALBSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ALBRouteTable
      SubnetId: !Ref ALBSubnet1

  ALBSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref ALBRouteTable
      SubnetId: !Ref ALBSubnet2

  NATRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-NATRoutes

  DefaultNATRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref NATRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    
  NATSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NATRouteTable
      SubnetId: !Ref NatSubnet
  
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRoutes(AZ1)

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref Natinstance

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-PrivateRoutes(AZ2)

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref Natinstance

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  NoIngressSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "no-ingress-sg"
      GroupDescription: "Security group with no ingress rule"
      VpcId: !Ref VPC
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Ref 'AWS::StackName'
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref VpcCIDR
      - IpProtocol:  -1
        FromPort: -1
        ToPort: -1
        CidrIp: !Ref VpcCIDR
      VpcId: !Ref VPC

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-Nat-Role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Nat-Role'
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub '${AWS::StackName}-Nat-Role'
      Path: "/"
      Roles:
        - !Ref InstanceRole
  Natinstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref 'AWS::Region', AMI]
      InstanceType: !Ref InstanceType
      IamInstanceProfile: !Ref InstanceProfile
      SourceDestCheck: false
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: Natinstance
      NetworkInterfaces:
        - GroupSet:
            - !Ref SecurityGroup
          DeviceIndex: '0'
          DeleteOnTermination: 'true'
          SubnetId: !Ref NatSubnet
      UserData:
        Fn::Base64: |
          #!/bin/bash
          sudo yum update -y
          sudo echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
          sudo echo "net.ipv4.conf.default.rp_filter = 1" >> /etc/sysctl.conf
          sudo echo "net.ipv4.conf.default.accept_source_route = 0" >> /etc/sysctl.conf
          sudo echo "kernel.sysrq = 0" >> /etc/sysctl.conf
          sudo echo "kernel.core_uses_pid = 1" >> /etc/sysctl.conf
          sudo echo "net.ipv4.tcp_syncookies = 1" >> /etc/sysctl.conf
          sudo sysctl -p
          sudo /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
          sudo yum install iptables-services -y
          sudo service iptables save
  NATEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      InstanceId: !Ref Natinstance
      Tags:
        - Key: Name
          Value: Natinstance

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'
  AZs: # Better name would be NumberOfAZs, but we keep the name for backward compatibility
    Description: 'Number of AZs'
    Value: 2
    Export:
      Name: !Sub '${AWS::StackName}-AZs'
  AZList:  # Better name would be AZs, but the name was already used
    Description: 'List of AZs'
    Value: !Join [',', [!Select [0, !GetAZs ''], !Select [1, !GetAZs '']]]
    Export:
      Name: !Sub '${AWS::StackName}-AZList'
  AZA:
    Description: 'AZ of A'
    Value: !Select [0, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZA'
  AZB:
    Description: 'AZ of B'
    Value: !Select [1, !GetAZs '']
    Export:
      Name: !Sub '${AWS::StackName}-AZB'  
  CidrBlock:
    Description: 'The set of IP addresses for the VPC.'
    Value: !GetAtt 'VPC.CidrBlock'
    Export:
      Name: !Sub '${AWS::StackName}-CidrBlock'
  InternetGateway:
    Description: 'InternetGateway.'
    Value: !Ref InternetGateway
    Export:
      Name: !Sub '${AWS::StackName}-InternetGateway'
  SubnetsPublic:
    Description: 'Subnets public.'
    Value: !Join [',', [!Ref PublicSubnet1, !Ref PublicSubnet2]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPublic'
  SubnetsPrivate:
    Description: 'Subnets private.'
    Value: !Join [',', [!Ref PrivateSubnet1, !Ref PrivateSubnet2]]
    Export:
      Name: !Sub '${AWS::StackName}-SubnetsPrivate'
  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]
    Export:
      Name: !Sub '${AWS::StackName}-PublicSubnets'
  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]]
    Export:
      Name: !Sub '${AWS::StackName}-PrivateSubnets'
  RouteTablesPrivate:
    Description: 'Route tables private.'
    Value: !Join [',', [!Ref PrivateRouteTable1]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPrivate'
  RouteTablesPublic:
    Description: 'Route tables public.'
    Value: !Join [',', [!Ref PublicRouteTable]]
    Export:
      Name: !Sub '${AWS::StackName}-RouteTablesPublic'
  SubnetAPublic:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPublic'
  SubnetBPublic:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPublic'
  ALBSubnets:
    Description: A list of the ALB subnets
    Value: !Join [ ",", [ !Ref ALBSubnet1, !Ref ALBSubnet2 ]]
    Export:
      Name: !Sub '${AWS::StackName}-ALBSubnets'
  ALBSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref ALBSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-ALBSubnet1'
  ALBSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Value: !Ref ALBSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-ALBSubnet2'
  NatSubnet:
    Description: A reference to the NAT subnet in the 1nd Availability Zone
    Value: !Ref NatSubnet
    Export:
      Name: !Sub '${AWS::StackName}-NatSubnet'
  SubnetAPrivate:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub '${AWS::StackName}-SubnetAPrivate'
  SubnetBPrivate:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub '${AWS::StackName}-SubnetBPrivate'
  Natinstance:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref Natinstance
    Export:
      Name: !Sub '${AWS::StackName}-Natinstance'
  NATEIP:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref NATEIP
    Export:
      Name: !Sub '${AWS::StackName}-NATEIP'
  SecurityGroup:
    Description: A reference to the private subnet in the NAT 1st Availability Zone
    Value: !Ref SecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroup'
  NoIngressSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref NoIngressSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-NoIngressSecurityGroup'
  InstanceRoleName: 
    Description: Cloudwatch-SSM Role
    Value: !Ref InstanceRole 
    Export:
      Name: !Sub '${AWS::StackName}-InstanceRoleName' 
  InstanceRoleArn: 
    Description: Cloudwatch-SSM Role Arn
    Value: !GetAtt InstanceRole.Arn 
    Export:
      Name: !Sub '${AWS::StackName}-InstanceRoleArn'
